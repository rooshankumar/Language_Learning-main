### 🚀 Implement Cloudinary Image Uploads in My Node.js + MongoDB App

#### 🔹 **Tasks to Implement:**
1️⃣ **Set up Cloudinary Configuration**  
   - Use environment variables for security.
   - Create a `lib/cloudinary.js` file to configure Cloudinary.

2️⃣ **Create an Image Upload API (`/api/upload`)**  
   - Use `multer` for handling file uploads.  
   - Upload images to Cloudinary and store the **image URL** in MongoDB.  
   - Return the Cloudinary **secure URL** after a successful upload.

3️⃣ **Update User Profile to Include a Profile Picture**  
   - Modify the `PUT /api/profile/update` route to allow **profile picture uploads**.  
   - Ensure profile picture updates are **stored permanently in MongoDB**.  
   - Fetch and display the **profile picture on the homepage**.

4️⃣ **Frontend Image Upload Handling**  
   - Create a function to **upload images from the frontend**.
   - Send images to `/api/upload` and receive a **Cloudinary image URL**.
   - Store the Cloudinary image URL in the user’s **MongoDB profile**.

5️⃣ **Protect Routes & Display Profile Picture**  
   - Ensure **only logged-in users** can access profile updates.  
   - Display the **profile picture on the homepage and profile page**.

---

### 🔹 **Expected File Changes**
- **`lib/cloudinary.js`** → Cloudinary configuration  
- **`routes/upload.js`** → API route to handle image uploads  
- **`routes/profile.js`** → Modify profile update to store profile pictures  
- **Frontend (React/Next.js)** → Add image upload functionality  

---

### 🔹 **Expected Behavior After Implementation**
✔ **Users can upload profile pictures** through a file upload button.  
✔ **Uploaded images are stored in Cloudinary** and MongoDB saves the **image URL**.  
✔ **Profile pictures automatically update on the homepage and profile page**.  
✔ **Profile details persist until changed** by the user.  
✔ **All routes are protected** so only authenticated users can modify profiles.  

---

### **🔹 Best Practices**
- Use **Cloudinary API keys from `.env`** securely.  
- Implement **middleware to protect routes** and prevent unauthorized profile changes.  
- Optimize **file size and formats** before uploading to Cloudinary.  

---

🔧 **Implement Cloudinary-based profile picture uploads and ensure profile details persist in MongoDB.**  
Make sure authentication protection is enforced throughout the app.
