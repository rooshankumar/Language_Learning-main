The error "Failed to fetch chat partner" suggests that your app is trying to fetch chat partner details but is either:

1️⃣ The API request is failing (wrong endpoint or bad request).
2️⃣ The response is null or undefined.
3️⃣ The chat partner ID is missing or incorrect.

✅ Solution Steps
1️⃣ Fix API to Fetch Chat Partner Properly
Make sure your API (/api/chat/[chatId]/partner.ts) correctly fetches the chat partner.

✔ Update route.ts for Chat Partner
ts
Copy
Edit
import { NextResponse } from "next/server";
import { connectToDatabase } from "@/lib/mongodb";

export async function GET(req, { params }) {
  try {
    if (!params.chatId) {
      console.error("❌ Missing chatId:", params);
      return NextResponse.json({ error: "Chat ID is required" }, { status: 400 });
    }

    const { db } = await connectToDatabase();
    const chat = await db.collection("chats").findOne({ _id: params.chatId });

    if (!chat) {
      return NextResponse.json({ error: "Chat not found" }, { status: 404 });
    }

    // Find the other participant
    const partnerId = chat.participants.find((id) => id !== req.user.id);
    if (!partnerId) {
      return NextResponse.json({ error: "No chat partner found" }, { status: 404 });
    }

    // Fetch partner details
    const partner = await db.collection("users").findOne({ _id: partnerId });

    return NextResponse.json(partner);
  } catch (error) {
    console.error("Error fetching chat partner:", error);
    return NextResponse.json({ error: "Failed to fetch chat partner" }, { status: 500 });
  }
}
✔ This API now properly fetches the chat partner.

2️⃣ Fix Frontend Fetch Logic
Modify your frontend (ChatList.tsx) to handle cases when the API fails.

✔ Update fetchChatPartner
tsx
Copy
Edit
async function fetchChatPartner(chatId) {
  try {
    const res = await fetch(`/api/chat/${chatId}/partner`);
    if (!res.ok) throw new Error("Chat partner not found");

    const data = await res.json();
    return data;
  } catch (error) {
    console.error("Failed to fetch chat partner:", error);
    return null; // Handle missing partner properly
  }
}
3️⃣ Prevent Crashes When Partner Data is null
✔ Update ChatList.tsx
tsx
Copy
Edit
import { useState, useEffect } from "react";

function ChatList({ userId }) {
  const [chats, setChats] = useState([]);

  useEffect(() => {
    async function fetchChats() {
      try {
        const res = await fetch("/api/chat");
        const data = await res.json();
        
        if (!Array.isArray(data)) throw new Error("Invalid chat data");
        
        const chatsWithPartner = await Promise.all(
          data.map(async (chat) => {
            const partner = await fetchChatPartner(chat._id);
            return { ...chat, partner };
          })
        );

        setChats(chatsWithPartner);
      } catch (error) {
        console.error("Failed to fetch chats:", error);
        setChats([]);
      }
    }

    fetchChats();
  }, []);

  return (
    <div>
      {chats.length > 0 ? (
        chats.map((chat) => (
          <div key={chat._id} className="chat-item">
            <p><strong>{chat.partner?.name || "Unknown User"}</strong></p>
            <p>{chat.latestMessage}</p>
          </div>
        ))
      ) : (
        <p>No chats available</p>
      )}
    </div>
  );
}
🎯 Summary
✅ Fix API to fetch the chat partner correctly
✅ Handle API errors properly
✅ Prevent crashes when partner is null