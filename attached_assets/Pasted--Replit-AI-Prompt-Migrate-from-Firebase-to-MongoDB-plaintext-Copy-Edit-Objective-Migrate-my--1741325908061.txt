üî• Replit AI Prompt: Migrate from Firebase to MongoDB
plaintext
Copy
Edit
### Objective:
Migrate my Next.js project from **Firebase** to **MongoDB** (local database).

---

### üîπ Changes to Make:
‚úÖ **Remove Firebase Dependencies & Files**  
- Uninstall all Firebase-related packages:
npm uninstall firebase @firebase/auth @firebase/firestore

markdown
Copy
Edit
- Delete Firebase-related files:
- `/lib/firebase.js` or `/lib/firebase.ts`
- Any Firebase authentication or Firestore database configuration files.

‚úÖ **Install MongoDB Dependencies**  
- Install Mongoose for MongoDB:
npm install mongoose

csharp
Copy
Edit

‚úÖ **Configure MongoDB Connection (`lib/mongoose.ts`)**  
- Create `lib/mongoose.ts` with the following code:
```ts
import mongoose from 'mongoose';

let isConnected = false;

export const connectToDatabase = async () => {
  if (isConnected) return;

  if (!process.env.MONGODB_URI) {
    throw new Error('Please define the MONGODB_URI environment variable');
  }

  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    isConnected = true;
    console.log('‚úÖ MongoDB connected successfully');
  } catch (error) {
    console.error('‚ùå Error connecting to MongoDB:', error);
  }
};
‚úÖ Set MongoDB Local Connection (.env.local)

Update the .env.local file:
bash
Copy
Edit
MONGODB_URI=mongodb://localhost:27017/myLanguageApp
‚úÖ Modify Models from Firebase to MongoDB

Move Firebase-based user authentication & database logic to MongoDB models.
Create a models/User.ts file:
ts
Copy
Edit
import mongoose, { Schema, models, model } from 'mongoose';

const UserSchema = new Schema(
  {
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String },
    image: { type: String, default: '/placeholder-user.jpg' },
    bio: String,
    age: Number,
    nativeLanguage: String,
    learningLanguage: String,
    interests: [String],
    isOnboarded: { type: Boolean, default: false },
  },
  { timestamps: true }
);

export default models.User || model('User', UserSchema);
‚úÖ Update API Routes to Use MongoDB Instead of Firebase

Modify /app/api/user/profile/route.ts to fetch user data from MongoDB:
ts
Copy
Edit
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { connectToDatabase } from '@/lib/mongoose';
import User from '@/models/User';

export async function GET(req: Request) {
  try {
    const session = await getServerSession();

    if (!session || !session.user) {
      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
    }

    await connectToDatabase();
    const user = await User.findOne({ email: session.user.email });

    if (!user) {
      return NextResponse.json({ message: 'User not found' }, { status: 404 });
    }

    return NextResponse.json(user);
  } catch (error) {
    return NextResponse.json({ message: 'Failed to fetch user' }, { status: 500 });
  }
}
‚úÖ Ensure Authentication Works with MongoDB Instead of Firebase Auth

Replace Firebase authentication with NextAuth.js.
‚úÖ Test MongoDB Connection & API Routes

Start MongoDB:
css
Copy
Edit
mongod --dbpath /path/to/db
Restart Next.js:
arduino
Copy
Edit
npm run dev
Test API endpoints:
Fetch User: GET http://localhost:3000/api/user/profile
Update User: PATCH http://localhost:3000/api/user/profile
üîπ Final Goal:
Successfully replace Firebase with MongoDB and ensure the project runs without Firebase dependencies.

pgsql
Copy
Edit
‚úÖ **Let Replit perform these changes automatically!** üöÄ  