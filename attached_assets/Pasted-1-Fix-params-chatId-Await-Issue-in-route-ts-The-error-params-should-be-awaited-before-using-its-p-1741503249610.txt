1️⃣ Fix params.chatId Await Issue in route.ts
The error "params should be awaited before using its properties" suggests that params might be coming from context in an async function, and you need to use it correctly.

✅ Fix in /api/chat/[chatId]/route.ts
Replace:

tsx
Copy
Edit
const chatId = params.chatId;
With:

tsx
Copy
Edit
export async function GET(request, { params }) {
  try {
    if (!params || !params.chatId) {
      console.error("❌ Missing chatId:", params);
      return NextResponse.json({ error: "Chat ID is required" }, { status: 400 });
    }

    const chatId = params.chatId;
    if (typeof chatId !== "string") {
      console.error("❌ Invalid chatId type:", typeof chatId);
      return NextResponse.json({ error: "Invalid Chat ID" }, { status: 400 });
    }

    console.log("📩 Fetching messages for chat:", chatId);
    const { db } = await connectToDatabase();
    const messages = await db.collection("messages").find({ chatId }).toArray();

    return NextResponse.json({ messages });
  } catch (error) {
    console.error("❌ Error fetching messages:", error.message);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
✅ Handles missing or invalid chatId
✅ Ensures database connection before querying

2️⃣ Fix Failed to Fetch Chats in chat-list.tsx
The error "Failed to fetch chats" means that the API call to /api/chat is failing. The 405 error means it's trying to use the wrong HTTP method (e.g., POST instead of GET).

✅ Fix fetchChats() in chat-list.tsx
tsx
Copy
Edit
const fetchChats = async () => {
  try {
    const response = await fetch("/api/chat", {
      method: "GET", // Ensure GET method
      headers: { "Content-Type": "application/json" },
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status} - ${response.statusText}`);
    }

    const data = await response.json();
    return data.chats || []; // Ensure 'chats' exists in response
  } catch (error) {
    console.error("❌ Error fetching chats:", error.message);
    return []; // Prevents UI from breaking
  }
};
✅ Ensures correct API method (GET)
✅ Handles fetch errors gracefully

3️⃣ Fix 405 Method Not Allowed in /api/chat
If /api/chat is returning 405, it means your API route isn't handling the GET request correctly.

✅ Fix in /api/chat/route.ts
tsx
Copy
Edit
import { NextResponse } from "next/server";
import { connectToDatabase } from "@/lib/mongodb";

export async function GET() {
  try {
    const { db } = await connectToDatabase();
    if (!db) throw new Error("Database connection failed");

    const chats = await db.collection("chats").find({}).toArray();
    return NextResponse.json({ chats });
  } catch (error) {
    console.error("❌ Error fetching chats:", error.message);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
✅ Ensures the GET method works properly
✅ Prevents crashes if DB connection fails

4️⃣ Fix Message Alignment (Like Telegram)
Sent messages should be on the right side, and received messages on the left.

✅ Fix in Message.tsx
tsx
Copy
Edit
const Message = ({ message, userId }) => {
  const isSentByUser = message.senderId === userId;

  return (
    <div className={`flex ${isSentByUser ? "justify-end" : "justify-start"}`}>
      <div
        className={`p-3 rounded-lg max-w-xs ${
          isSentByUser ? "bg-blue-500 text-white" : "bg-gray-200 text-black"
        }`}
      >
        {message.text}
      </div>
    </div>
  );
};
✅ Sent messages (userId === senderId) are right-aligned
✅ Received messages are left-aligned

5️⃣ Fix Real-Time Profile Name & Picture Sync
If usernames and profile pictures aren’t updating, ensure they’re being fetched and updated on state change.

✅ Fix in useEffect inside chat-list.tsx
tsx
Copy
Edit
useEffect(() => {
  const fetchUsers = async () => {
    try {
      const response = await fetch("/api/users");
      if (!response.ok) throw new Error("Failed to fetch users");

      const data = await response.json();
      setUsers(data.users); // Update state
    } catch (error) {
      console.error("❌ Error fetching users:", error.message);
    }
  };

  fetchUsers();
}, []);
✅ Ensures profile updates in real time
✅ Prevents stale user info

🚀 Final Steps
1️⃣ Fix /api/chat/[chatId]/route.ts to await params.chatId properly
2️⃣ Ensure fetchChats() uses GET instead of POST
3️⃣ Fix 405 Method Not Allowed by correctly handling GET in /api/chat/route.ts
4️⃣ Align messages properly in Message.tsx (sent on right, received on left)
5️⃣ Sync profile names & pictures by fetching /api/users on state change