I want to create a **real-time chat system** in my **language learning app**, where users can message each other after finding them in the "Community" section.

### **ðŸ’¡ Core Features:**
1. **Next.js Frontend (Community & Chat Pages)**
   - Users can **browse the Community Section** and find new language partners.
   - When they click **"Chat"** on a profile, a **new chat session** starts.
   - **Chat messages update in real-time** using **WebSockets (Socket.io)**.
   - Messages are **also stored in Firebase Firestore** for permanent access.

2. **Node.js Backend (Express + Socket.io)**
   - Creates a **WebSocket server** for instant messaging.
   - When a user sends a message:
     - It **broadcasts the message instantly** to the recipient via WebSockets.
     - It **saves the message in Firestore** for persistence.
   - Ensures **only authenticated users** can send messages.

3. **Authentication (Firebase Auth)**
   - Users **must be logged in** to start a chat.
   - **Verify users before allowing messaging** to prevent spam.

### **ðŸ’¡ Workflow:**
1. **User opens the Community Section** and clicks on a profile.
2. Clicking **"Chat"** opens a **real-time chat window**.
3. Messages are **instantly delivered via WebSockets**.
4. Messages are also **saved in Firestore** for future access.
5. The recipient sees the **new chat in their "Chats" section**.

### **ðŸ’¡ Implementation Steps:**
1. **Setup Firebase Firestore in Next.js** (`lib/firebase.js`).
2. **Create a WebSocket Server** (`server.js` in Express).
3. **Connect WebSocket with Firestore** (listen for new messages & update Firestore).
4. **Modify the Community Page (`Community.js`)**
   - Add a "Chat" button for each user profile.
   - Clicking "Chat" opens the real-time chat window.
5. **Modify the Chat Page (`Chat.js`)**
   - Displays all messages between users.
   - Uses **WebSockets for instant updates** and **Firestore for message history**.

âœ… **Tech Stack:**
- **Frontend:** Next.js (React)
- **Backend:** Node.js, Express.js, Socket.io
- **Database:** Firebase Firestore
- **Authentication:** Firebase Auth
- **Hosting:** Replit (Backend), Netlify/Vercel (Frontend)

ðŸ“Œ **Expected Outcome:**
- A **real-time chat system** that starts when users click "Chat" on a profile in the **Community Section**.
- Messages are delivered **instantly via WebSockets** and **saved in Firestore** for history.
- Only **authenticated users** can chat.

**Please generate the full implementation code for Next.js, Express.js, and Firebase, ensuring this chat feature starts when users click "Chat" in the Community Section.**
